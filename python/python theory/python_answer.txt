1. Python --> Python is a programing language with objects, modules, threads, exception &
    automatic memory management.

2. Key Feature in python --> 
    1.Python is an interpreted language.
    2.Python is dynamically typed.
    3.Python is well suited to oops.

3. dynamically typed --> means that type of the variable is determined only during runtime.

4. sotrong typed --> means that variable do have a type & that type matters when performing 
    operations on a variable.

5. diff b/w array and list --> array & list in python have the same way of storing data, but arrays
    can hold only a single data type element where as list can hold any data typed element.
    1. List & Array both are used to store data in python.
    2. Both can be indexed & iterated.
    3. Arrays need to be declared where as list do not need because they are part of python syntax,
        this is the reason list are more often used than array.

6. Python class --> A class is like an object constructor or blue print for creating object.

7. Python Constructor --> is a special class method for creating & initializing an object instance at that class.

8. __init__ --> is used to assign values to object properties.
    e.g 
        class person:
            def __init__(self, name, age):
                self.name = name
                self.age = age
        p = person("manoj", 28)
        print(p.name, p.age)

9. self --> Self parameter is a refrence to the current instance of the class & is used to access
    variables that belongs to the class.

10. Memory Management in Python --> 
    1.Memory is managed by python private heap space.
    2.Allocation of python heap space for python object is done by python memory manager.
    3.Python also have an inbuilt garbage collector.

11. range() --> returns a sequence of numbers, starting from 0 by default & increment by 1 & ends 
    at a specified numbers.

12. diff b/w list & tuple --> 
    1.List is mutable & Tuple is immutable.
    2.a = list() & a = tuple(,)
    3.List iteration is slower, time consuming & Tuple iteration is faster, less time consuming.
    4.List consumes more memory & Tuple consumes less memory.
    5.List provides many inbuilt methods & Tuple have less inbuilt methods.

13. lambda function --> A lambda function is a small anonymous function. A lambda function can 
    take any number of arguments but can only have one expression.
    syntax:
        lambda arguments : expression
    e.g

14. iterators and types --> An iterator is an object that contains a countable numbers of values.
    two types 
    1. __iter__()
    2. __next__()

15. pickling --> Pickle module accepts any python object & converts it into a string representation
    & dumps it into a file by using dump function this process is called pickling.

16. unpickling --> While the process of retrieving original object from the stored string representation
    is called unpickling.

17. generators --> 
    1. Python provides a generator to create your own iterator function.
    2. A generator is a special type function which does not return a single value, instead it returns an
        iterator object with a sequence of values.
    3. In a generator function a yield statement is used rather than a return statement.

18. dictionary --> is a collection which is ordered, changeable & indexed.
    In python dictionaries are written with curly brackets & they have key's & Value.

19. *args (Non Keyword Arguments) --> When we are not sure how many arguments are going to be passed to a
    function or if we want to pass a stored list or tuple as argument function.

20. **kwargs (Keyword Arguments) --> when we do not know how many Keywords arguments will be passed to a
    function or it can be used to pass the values of a dictionary as keyword argument.

    Note:- We use args and *kwargs as an argument when we are unsure about the number of arguments 
    to pass in the functions.

21. shallow copy --> is used when a new instance type gets created & it keeps the values that are copied
    in the new instance.
    shallow copy is used to copy the refrence pointers just like it copies the values.
    example:

22. deep copy --> is used to store the values that are already copied.
    deep copy does not copy the refrence pointers to the object.
    example:

23. decorators --> is used to add functionality to an existing code this is called meta programing
    because a part of the program tries to modify another part of the program at compile time.

24. sets --> 

25. oops concepts

26. list compreshension