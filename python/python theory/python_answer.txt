1. Python --> Python is a programing language with objects, modules, threads, exception &
    automatic memory management.

2. Key Feature in python --> 
    1.Python is an interpreted language.
    2.Python is dynamically typed.
    3.Python is well suited to oops.

3. dynamically typed --> means that type of the variable is determined only during runtime.

4. strong typed --> means that variable do have a type & that type matters when performing 
    operations on a variable.

5. diff b/w array and list --> array & list in python have the same way of storing data, but arrays
    can hold only a single data type element where as list can hold any data typed element.
    1. List & Array both are used to store data in python.
    2. Both can be indexed & iterated.
    3. Arrays need to be declared where as list do not need because they are part of python syntax,
        this is the reason list are more often used than array.

6. Python class --> A class is like an object constructor or blue print for creating object.

7. Python Constructor --> is a special class method for creating & initializing an object instance at that 
    class.

8. __init__ --> is used to assign values to object properties.
    e.g 
        class person:
            def __init__(self, name, age):
                self.name = name
                self.age = age
        p = person("manoj", 28)
        print(p.name, p.age)

9. self --> Self parameter is a refrence to the current instance of the class & is used to access
    variables that belongs to the class.

10. Memory Management in Python --> 
    1.Memory is managed by python private heap space.
    2.Allocation of python heap space for python object is done by python memory manager.
    3.Python also have an inbuilt garbage collector.

11. range() --> returns a sequence of numbers, starting from 0 by default & increment by 1 & ends 
    at a specified numbers.

12. diff b/w list & tuple --> 
    1.List is mutable (changeable) & Tuple is immutable (not changeable).
    2.a = list() & a = tuple(,)
    3.List iteration is slower, time consuming & Tuple iteration is faster, less time consuming.
    4.List consumes more memory & Tuple consumes less memory.
    5.List provides many inbuilt methods & Tuple have less inbuilt methods.

13. lambda function --> A lambda function is a small anonymous function. A lambda function can 
    take any number of arguments but can only have one expression.
    syntax:
        lambda arguments : expression
    e.g

14. iterators and types --> An iterator is an object that contains a countable numbers of values.
    two types 
    1. __iter__()
    2. __next__()

15. pickling --> Pickle module accepts any python object & converts it into a string representation
    & dumps it into a file by using dump function this process is called pickling.

16. unpickling --> While the process of retrieving original object from the stored string representation
    is called unpickling.

17. generators --> 
    1. Python provides a generator to create your own iterator function.
    2. A generator is a special type function which does not return a single value, instead it returns an
        iterator object with a sequence of values.
    3. In a generator function a yield statement is used rather than a return statement.

18. dictionary --> is a collection which is ordered, changeable & indexed.
    In python dictionaries are written with curly brackets & they have key's & Value.

19. *args (Non Keyword Arguments) --> When we are not sure how many arguments are going to be passed to a
    function or if we want to pass a stored list or tuple as argument function.

20. **kwargs (Keyword Arguments) --> when we do not know how many Keywords arguments will be passed to a
    function or it can be used to pass the values of a dictionary as keyword argument.

    Note:- We use args and *kwargs as an argument when we are unsure about the number of arguments 
    to pass in the functions.

21. shallow copy --> is used when a new instance type gets created & it keeps the values that are copied
    in the new instance.
    shallow copy is used to copy the refrence pointers just like it copies the values.
    example:

22. deep copy --> is used to store the values that are already copied.
    deep copy does not copy the refrence pointers to the object.
    example:

23. decorators --> is used to add functionality to an existing code this is called meta programing
    because a part of the program tries to modify another part of the program at compile time.

24. sets --> is a collection which is unordered & unindexed or unchangeable. sets are written curly 
    brackets.
    1. Duplicate not allowed.
    2. Store multiple item in single variable.
    3. Slicing is not done in sets.

25. Frozen Set --> is an immutable version of python set while elements of set can be modified but frozen 
    set remains same after creation.
    Frozen set can take single parameter iterable can be set, dictionary & tuple.

26. Primitive Data Structure -->
    1. Integers
    2. Flaot
    3. string
    4. Boolean

27. Non Primitive Data Structure/Python Data Structure -->
    1. Array
    2. List
    3. Tuple
    4. dictionary
    5. sets
    6. Files

28. oops concepts -->
    1. Inheritance --> Child class inherit the parent class.
    2. Polymorphism --> means one name many forms. Two types
        a. Static --> Overloading
        b. Dynamic --> Overriding
        Overloading --> occurs when two or more methods in one class have the same method name but 
            different parameters.
        Overriding --> means having two methods with the same method name & parameters.
    3. Data Abstraction --> means a concept or idea which is not associated with any particular instance.
    4. Encapsulation --> Hiding of data implementation by restricting access to public methods.

29. list compreshension --> offers a shorter syntax. when you want to create a new list based on the values
    of an existing list.
    example:
        f = ['apple', 'banana', 'cherray']
        print([x for x in f if 'a' in x])

30. for loop --> is used for iterating over a sequence.

31. Switch Case --> that allow you to control the flow of your program.

32. Pass --> is a null statement, the Interpreter does not ignore a pass statement, but nothing happens & 
    the statement result into no operations.
    The pass statement is useful when you don't write the implementation of a function but you want to 
    implement it in the future.

33. Continue --> keyword is used to end the current iteration in for loop or while loop & continues to the
    next iteration.

34. Diff B/W Comment & Pass --> Interpreter ignores a comment entirely but pass is not ignored.

35. try block --> lets you test a block of code for error.
36. except block --> lets you handle the error.
37. finally block --> lets you execute code, regardless of the result of the try & except block.

38. Compiler -->
    1. Compiler takes the entire program in one go.
    2. it is faster.
    3. it consumes less time.
    4. it is more efficient.
    5. it generate an intermediate machine code.

39. Interpreter -->
    1. Interpreter takes a single line of code at a time.
    2. It is slower
    3. It consumes more time.
    4. less efficient.
    5. never produces any intermediate code.

40. Recursive --> function that calls itself is said to be Recursive.

41. Recursion --> function calls itself directly or indirectly.

42. Assert --> keyword is used when debugging code.
    The Assert keyword lets you test if a condition in your code returns True, if not the program will 
    raise an AssertionError.

43. Global Interpreter Lock (GIL)

44. monkey patching --> you can modify a class or module at run-time.

45. Difference between is & ==
    The is operator is used to check if different variables are pointing to the same object in memory. 
    The == operator is used in Python when the values of the operands are equal.

Python Constraints -->
Python Constant -->
Protected Members -->

Strip() --> method is used to remove the white space from begining & at the end of the string.

abs() --> function return the absolute value.
    The absolute value of any number is always positive it removes the negative sign of a number.

any() --> function return true, if any item in an iterable are true, otherwise return false or if iterable
    object is empty it return false.

all() --> function return true if all items in an iterable are true, otherwise it return false or if
    iterable object is empty it return True.
Note:- any() & all() function can only work for list, tuple & dictionary.

nums = [2, 3, 1, 5, 6, 4, 0]
sort() -->
    1. sort will sort the list in-place, mutating its indexes & return None.
    2. sort is a method of the list class & can only be used with list.
    3. print(nums.sort()) # sort() will returns a None, used with only list methods.

sorted() -->
    1. Sorted will return a new sorted list leaving the original list unchanged.
    2. sorted accepts any iterable.
    3. print(sorted(nums)) # sorted() will returns a list