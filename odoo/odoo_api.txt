# odoo API (Application Programming interface) --> odoo uses Restful api.
    1. Get --> To get data from api.
    2. Post --> To send data from api when creating records.
    3. Put --> To update or edit existing data.
    4. Delete --> To remove or delete data.

# Restful API --> is a API that uses HTTP request to get, Put, Post & delete data.
    It uses both OAuth1 & OAuth2 protocols to authenticate 3rd party application.

# CRUD (Create, Retrieve, Update or Delete)
    1. Create (Insert) a Record --> To create a new record, you can use the create() method on a model.

    2. Retrieve/Read (Select) Records --> To read records, you can use the search() method.

    3. Update (Modify) a Record --> To update a record, you can use the write() method.

    4. Delete (Remove) a Record --> To delete a record, you can use the unlink() method.

# auth = 'none' /auth = 'public'
    1. This means that no authentication is required to access the route or method.
    2. The route can be accessed by anyone, regardless of whether they are logged in or not.
    3. It is typically used for routes that are intended to be publicly accessible, 
        such as APIs that do not require user authentication.
    Example:
        @http.route('/my/public/route', auth='none'/'public', type='json')
        def public_route(self):

# auth='user': 
    1. This means the user must be logged in to access this route.
    2. Ensures the user is authenticated.

# auth='api': 
    1. This is used to authenticate API requests using an API key.
    2. API token authentication for external API access.

# Key Differences: auth = 'none' & auth = 'public'
    auth = 'none': Completely open access, no user verification (anyone can access).
    auth = 'public': Open access, but the user is identified as a public user if not logged in.

# API Response Status code
    1.Informational => 1**
    2.Success => 2**
    3.Redirection => 3**
    4.Client Error => 4**
    5.Server Error => 5**

1. Pagination It is wrong to send 10,0000 records at a time.
    instead, break it into 50-100 items per page, so user will get quick response.
2. (Asynchronous) Async Logging it is slow to write logs on every request.
    Queue the logs in memory & when the background thread is running it will keep writing it.
3. Caching (Rediss,)
    Why fetch same data from the DB again & again store it in a cache like redis & check the cache in every 
    request, if it is available in the cache return it from there otherwise, access it from the database store 
    it in the cache & then return the user.
4. Compression
    compress json or text with gzip or Brotli
5. connection Pooling (PgBouncer)
    connection Pooling every time opening or closing DB connection is a very expensive process use connection
    Pooling ready connections will always be available that means the query will be executed immediately.