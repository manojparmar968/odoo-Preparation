# Create basic module by cmd
    ./odoo-bin scaffold module_name ../addons_path

# /web/database/selector
# python odoo-bin -c basic.conf --xmlrpc-port=8017 --save
# "args": ["-cD:\\odoo18\\basic\\odoo\\baic18.conf","-d","database name"],
# "args": ["-cD:\\odoo18\\basic\\odoo\\baic18.conf","-u","module name","-d","database name"],

# which library to connect postgres in python.
    psycopg2 or psycopg2-binary

# View --> Define how records should be display to end-user. They exist various types-
    1. tree/list         2. form                3. Kanban               4. search
    5. qweb              6. calender            7. dashboard            8. gantt
    9. pivot             10. graph              11. map                 12. cohort

# Types of model in odoo
    1. AbstractModel (models.AbstractModel) --> is used to reduce the code & implement common logic in
        reusable component.
        Abstract models don’t have corresponding database tables.

    2. models (models.Model) --> representation of a database table. It defines the structure of the data, 
        fields, and the business logic.

    3. TransientModel (models.TransientModel) --> where data is stored temporary & used for wizards.

# rec_name --> is an attribute used to define the string representation of a record in the 
    user interface (UI).

# wizard -->
    1. wizard models are not stored in a database.
    2. Records are created temporary & removed when operations are finished.
    3. Transient model is used for them.

# Different types of inheritance in odoo
    1. Classical Inheritance --> The initial type of inheritance is the classic inheritance where we use
        both _name & _inherit attributes together.
        _name = ''
        _inherit = ''

    2. Extension inheritance
        Extension inheritance we will only use the _inherit attribute & do not use _name attribute.
        Use _inherit when modifying or extending a model.
        _inherit = ['account.move']

    3. Delegation inheritance
        Delegation inheritance we use _inherits attribute, this type of inheritance is used if you want
        to sink another model to your current model without affecting the views.
        Use _inherits when creating a model that reuses another model's fields.
        _name = "account.payment"
        _inherits = {'account.move': 'move_id'}
        move_id = fields.Many2one(comodel_name='account.move')

# Odoo Architecture --> odoo follows a multitier Architecture.
    1. Presentation tier --> The top most level of the application is the user interface.
        The main function of the interface is to transalate task & result to something the user can 
            understand.
    
    2. Logic tier --> This layer coordinates the application, processes commands, make logical decisions &
        evaluations & performs calculations. It also moves & process data between the two surrounding 
            layers.
    
    3. Data tier --> Here information is stored & retrieved from a database or file system. 
        The information is back to logic tier for processing & then back to user.

# MVC (Model-View-Controller) --> which helps structure and organize the application into separate components: 
    Model (data) --> is a class that represents the data.
        1. Define database tables (fields)
        2. Business rules (methods, constraints, computed fields)
        3. ORM interaction (create, read, write, delete)
    View (user interface OR Presentation Layer) --> is to present data that is in model.
        Defines the user interface and how data is displayed.
        1. Form view    2. Tree (list) view     3. Kanban view 
        4. Calendar, Pivot, Gantt, Graph, etc.
    Controller (business logic OR Request Handling Layer) --> is invoked by URL. It uses model & invokes view.
        It Handles web requests, typically for web controllers or APIs.
        1. Website apps & Web portals
        2. Custom REST APIs

# Different types of actions in odoo
    1. server Actions (ir.actions.server) --> offers various types of actions that can be executed 
        automatically.

    2. window Actions (ir.actions.act_window) --> It is used to present the visualization of the data 
        models through different types of views.

    3. URL Actions (ir.actions.act_url) --> allow to open a URL (website/webpage) via an odoo action.

    4. Client Actions (ir.actions.client) --> are basically menu-item defined in xml & the corresponding 
        actions are mapped to a widget.

    5. Report Actions (ir.actions.report) --> are the actions which trigger the printing actions of report.
        'report_type' represents the type of the report whether it is a PDF report (qweb-pdf) or HTML 
        report (qweb-html).

    6. Automated Actions (ir.cron) --> that triggered automatically on a predefined time interval.

# Onchange/@api.onchange()
    is triggered only when one of the given attributes changes its value.
    Example
        @api.onchange('value')
        def _onchange_(self):

# compute method
    should assign a value to the computed field therefore, it is necessary to ensure that the compute 
        method will asign a value to the field on every condition.
    Note:-
        1. It should specify those fields using @api.depends('value1', 'value2').
        2. Compute Field are not stored by defult.
        3. To store field in database use store = True.
        4. Compute field are readonly by default.
        5. if you are not using depends in compute method it will work only when form or tree will loard.
        6. When computed fields depend on other computed fields, changing a value can trigger a large 
            number of recomputations. This leads to poor performance.
    Example
        def _compute_(self):

# Inverse method: 
    The inverse function is mainly used to make the compute field editable. 
    A user can’t change a compute field value.
    An inverse function can be used to solve this problem.
    This inverse function can be given along with the compute function.

# depends/@api.depends()
    When a compute function is dependent on another record, then we have to use this depends decorator.
    This decorator will be called when some changes happens in the specified fields.
    Example:
        @api.depends('value')
        def _compute_(self)

# env --> 
    1. Access to the current user (uid)
    2. Access to the current model context (context)
    3. Access to the database cursor (cr)
    4. Access to other models (model registry)

# ref in odoo --> returns the record corresponding to an xml id.
    self.env.ref('module_name.xml external id').id

# Access Control/Access Rights --> Access rights are used to control user access to the odoo database.

# Record Rule --> are set to determine who can access the object according to the rule.
    we have 4 access modes for the object.
    1. create --> Access to create records in the object.
    2. write (edit) --> Access to write records in the object.
    3. Read (view only) --> Access to read records in object.
    4. unlink (delete) --> Delete access to delete object.

# Groups --> user can have access under access rights. Group specify to menu or fields will display for
    particular security group.

# qweb Report --> Qweb is a reporting engine or template engine used by odoo, by using this we can create
    reports in odoo. It uses xml to create design reports as per your need.
    The PDF rendering itself is performed by WKHTML to pdf.

# Relationship/Relational Field --> are used to link one model to another model.
    1. Many2one field --> is used to link current object to another object which acts as a parent for this
        object.
        Note:-
            1. Many2one is a Foreign key (int).
            2. Many2one will store in database.
            3. _id
        Example:-
            Class SaleOrderLine(models.model):
                _name = 'sale.order.line'
                order_id = fields.Many2one('sale.order', string = 'order Ref')

    2. One2Many --> can be used in case where the user want to store multiple records of the parent model
        & create a connection b/w those records & the current record through an inverse Many2one field.
        Note:-
            1. one2many (Parent Table) field is stored in the database, but it is not stored directly in 
                the parent model's table. Instead, the relationship is managed using a secondary table.
                Many2one (child table)  child records that have a foreign key pointing to the parent model.
            2. One2Many is logical field there is no effect in database.
            3. _ids
        Example:-
            Class SaleOrder(models.model):
                _name = 'sale.order'
                order_line_ids = fields.One2Many('sale.order', inverse_name = 'order_id', string='order line')

    3. Many2Many --> is used to create bidirectional multiple relationship b/w two different model.
        Note:-
            1.  many-to-many relationship is stored in the database, but it's not directly stored as a 
                field in either of the two models involved. 
                Odoo uses a intermediate table to handle the many-to-many relationship.
            2. _ids
        Example:-
            _ids = fields.Many2many(
                'image.document',               # comodel
                'product_template_image_rel',   # relation table name
                'product_template_id',          # column pointing to this model
                'image_document_id',            # column pointing to the comodel
                string='Document Images',
            )

# comodel --> It is the name of the target model to which we want to create the relational field.

# Related field --> A special case of compute field are related field. Which provide the value of a 
    sub-field on the current record.
    Note:-
        1. Not Stored in database
        2. Not copied
        3. readonly

# Difference between SQL Constraints & Python Constraints
    SQL Constraints --> are usually more efficient than python conditions.

    Python Constraints --> 
        @api.Constraints('value1', 'value2')

    Note:-  When performance matters always use sql Constraints.

# Assert Function --> are used to check whether the operation's output is True or False.

# res.partner: 
    a partner is a physical or legal entity. It can be a company, an individual or even a contact address.

# with_user(user)
    If the user is not the superuser, return a new version of this recordset connected to the 
    specified in non-superuser mode.

# with_company(company)
    Return a new instance of this recordset with altered context, such that:
    result.env.company = company
    result.env.companies = self.env.companies | company

# res.users: 
    the users of the system. Users can be ‘internal’, i.e. they have access to the Odoo backend. 
    Or they can be ‘portal’, i.e. they cannot access the backend, only the frontend 
    (e.g. to access their previous orders in eCommerce).

# copy=False
    If you put copy=False to a field, When you duplicate a record, 
    That value is not copied to duplicating (Newly created)record.

# ondelete='cascade'
    If you put this to a Many2one field, the deletion of record will cause to deletion of 
    one2one records according to that record.
    Eg:
    When you delete a Sale Order, It will delete sale order lines also.

# Index=True
    You can speed the database search performance. However, you should be careful not to add indexes on 
    too many fields because the size of the database can rapidly increase. 
    Which means, you should carefully detect the most searchable fields and to create indexes for them only.

# _auto = False: 
    with _auto = False on the model to don't trigger the database table creation for the model,
    but we can not use in TransientModel.

5.Deffered income and Deffered expense?
    Deferred revenue is money a company receives before it provides goods or services, 
    while deferred expenses are costs a company pays that aren't recorded until later. 
    Deferred revenue is also known as unearned revenue. 

    Examples of deferred revenue include:
        Rent payments received in advance.
        Annual subscription payments received at the beginning of the year 

    Examples of deferred expenses include:
        Prepaid expenses, such as a company paying for a year-long billboard advertisement
        Exceptional losses, such as damages due to a major earthquake

6.What is Agile methodology?
    Agile methodology is a project management framework that breaks projects down into several dynamic 
        phases, commonly known as sprints. 
    The Agile framework is an iterative methodology. After every sprint, teams reflect and look back to 
        see if there was anything that could be improved so they can adjust their strategy for the next 
        sprint.
        a. Plan
        b. Design
        c. Develop
        d. Test
        e. Deploy
        f. Review

# SDLC (software development life cycle)
    The goal of SDLC is to minimize project risk through forward planning.
    1. planning
    2. Analysis
    3. Design
    4. implementation
    5. Testing
    6. Maintainance

# @api.multi --> self will be the current recordset without iteration.
    Note:-
        1. From odoo 13 onwards @api.multi & @api.one are not used.
        2. You can remove @api.multi from the code, the function will work.
        3. To remove the singleton error, you can loop inside the function using for loop.

@api.model --> This decorator will convert old API calls to decorated function to new API signature.
    It allow to be polite when migrating code.

@api.depends('value') --> When a compute function is dependent on another record, then we have to use this 
    depends decorator.
    This decorator will be called when some changes happens in the specified fields.
    Example:
        @api.depends('value', 'value2')
        def _compute_(self):

@api.onchange('value') --> is triggered only when one of the given attributes changes its value.
    @api.onchange('value')
    def _onchange_(self):

@api.constrains('value1', 'value2') --> to check condition on create & update a record.
    1. are used in python code or we called python Constraints.
    2. When you need to validate some data before to be called create, write & unlink.

# automated actions
    Sending emails: Automatically send emails to customers or employees based on specific events, such as order 
        confirmations or task assignments.
    
    Creating records: Automatically create records in other modules based on events in one module, such as 
        creating a customer invoice when a sales order is confirmed.

    Updating fields: Automatically update fields in records based on specific conditions, such as updating the 
        status of a task when it is completed.

    Executing custom code: Execute custom Python code to perform complex actions or integrate with external 
        systems.

# Handling performance issues in large databases.
    Database optimization: Ensure your PostgreSQL database is properly indexed, tuned, and optimised for 
        performance.

    Code optimization: Write efficient code, avoid unnecessary database queries, and optimise loops and data 
        structures.

    Caching: Utilise caching mechanisms to store frequently accessed data in memory, reducing the need for 
        repeated database queries.

    Asynchronous tasks: Offload long-running tasks to background processes using Odoo’s asynchronous task 
        queue, preventing them from blocking the main thread and impacting user experience.
